{"mappings":"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","sources":["src/js/index.ts","src/js/adventure/mapbox.ts","src/js/auth/logout.ts","src/js/utils/alerts.ts","src/js/utils/errorHandler.ts","src/js/auth/login.ts","src/js/adventure/stripe.ts","src/js/account/initAccountSections.ts","src/js/account/handleAdventureForm.ts","src/js/api/saveAdventure.ts","src/js/account/populateAdventureForm.ts","src/js/account/formFields.ts","src/js/account/fillAdventureForm.ts","src/js/account/handleSettingsForm.ts","src/js/api/updateUserSettings.ts","src/js/account/dashboardNav.ts","src/js/api/loadSection.ts"],"sourcesContent":["import 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport '@babel/polyfill';\n\nimport { GeoLocation } from '@js/types';\nimport displayMap from './adventure/mapbox';\nimport logout from './auth/logout';\nimport login from './auth/login';\nimport bookAdventure from './adventure/stripe';\nimport { showAlert } from './utils/alerts';\nimport {\n  initSettingsForms,\n  initManageAdventuresForms,\n} from './account/initAccountSections';\nimport { dashboardNav } from './account/dashboardNav';\n\n/**\n * Initializes client-side functionality for various pages.\n *\n * Responsibilities:\n * - Imports and sets up external libraries (e.g., Bootstrap, Babel polyfills).\n * - Dynamically loads page-specific modules based on the current page context:\n *   - Login form handling (for `/login`).\n *   - User settings management (for `/me/settings`).\n *   - Adventure booking functionality (for `/adventure/:id` or `/adventure/:slug`).\n *   - Displays adventure locations on a map with Mapbox integration (for `/adventure/:id` or `/adventure/:slug`).\n *   - Admin dashboard navigation (for `/me/dashboard`).\n *   - Adventure form handling (for `/me/manage-adventures`).\n * - Displays success/error alerts from server-rendered pages using data attributes in the `<body>` tag.\n * - Configures the global logout functionality across all pages.\n *\n * Dynamic Behavior:\n * - Detects the current page using the `data-page` attribute on the `<body>` element to selectively load modules.\n * - Utilizes code-splitting and dynamic imports to load only the required JavaScript for the current page to enhance performance.\n */\n\n// Initializes login form handling from login page\nconst initLoginForm = () => {\n  const formLogin = document.querySelector('.form-login') as HTMLFormElement;\n\n  formLogin.addEventListener('submit', (e) => {\n    e.preventDefault();\n\n    const emailInput = document.getElementById('email') as HTMLInputElement;\n    const passwordInput = document.getElementById(\n      'password',\n    ) as HTMLInputElement;\n\n    const email: string = emailInput.value.trim();\n    const password: string = passwordInput.value;\n\n    if (!email || !password) return;\n\n    login(email, password);\n  });\n};\n\n// Initializes logout handler from any page\nconst initLogout = () => {\n  const btnLogout = document.querySelector('.btn-logout') as HTMLAnchorElement;\n  btnLogout?.addEventListener('click', logout);\n};\n\n// Initializes booking button functionality on the adventure page\nconst initBooking = () => {\n  const bookBtn = document.getElementById(\n    'book-adventure',\n  ) as HTMLButtonElement | null;\n\n  bookBtn?.addEventListener('click', (e) => {\n    const target = e.target as HTMLButtonElement;\n    target.textContent = 'Processing...';\n\n    //  Gets the adventure ID for the booking from the visited adventure page\n    const { adventureId } = target.dataset;\n\n    if (!adventureId) return;\n    bookAdventure(adventureId);\n  });\n};\n\n// Initializes map on the adventure page\nconst initMap = () => {\n  const mapBox = document.getElementById('map') as HTMLDivElement;\n\n  if (!mapBox) return;\n\n  mapBox.innerHTML = '';\n\n  // Get location data from data attribute ( json format )\n  const data = mapBox.dataset.locations;\n\n  if (!data) return;\n\n  const locations: GeoLocation[] = JSON.parse(data);\n  displayMap(locations);\n};\n\n// Displays a success alert using the message stored in the body data attribute (data-alert)\nconst showAlertFromBody = () => {\n  if (!document.body.dataset.alert) return;\n\n  showAlert({\n    type: 'success',\n    message: document.body.dataset.alert,\n    timeout: 20,\n  });\n};\n\n// Get the current displayed page name\nconst page = document.body.dataset.page;\n\n// Load only files needed for the page being loaded\nswitch (page) {\n  case 'login':\n    initLoginForm();\n    break;\n  case 'signup':\n    break;\n  case 'adventure':\n    initBooking();\n    initMap();\n    break;\n  case 'account':\n    dashboardNav();\n    initSettingsForms();\n    initManageAdventuresForms();\n    break;\n  default:\n}\n\n(() => {\n  initLogout();\n  showAlertFromBody();\n})();\n","import { GeoLocation } from '@js/types';\n\n/**\n * Access the MapboxGL instance loaded via CDN (only on specific pages like the adventure page)\n * and tell TypeScript to treat it as the same type as an imported 'mapbox-gl' module.\n * This allows proper IntelliSense and type checking when using `mapboxgl` in those files.\n *\n * Note:\n * - The 'mapbox-gl' module was not installed due to compatibility issues with other modules\n *   in the project (e.g., build tool conflicts or version mismatches).\n * - This workaround ensures full type support while using the global variable.\n *\n * If the compatibility issue is resolved in the future, consider replacing this with a proper import.\n */\nconst mapbox = (window as any).mapboxgl as typeof import('mapbox-gl');\n\n/**\n * Displays an interactive Mapbox map with adventure location markers.\n *\n * @param {GeoLocation[]} locations - An array of location objects containing coordinates and descriptions.\n *\n */\n\nconst displayMap = (locations: GeoLocation[]): void => {\n  mapbox.accessToken =\n    'pk.eyJ1IjoiYXJrbzg5MTkiLCJhIjoiY203ODIyMTdxMDk4MTJxc2hmbGhlODJ6cSJ9.r0Eky05QnJLzmDKPf--oWw';\n\n  // Initializes the map with a custom style and disables scroll zoom\n  const map = new mapbox.Map({\n    container: 'map', // Container ID\n    style: 'mapbox://styles/arko8919/cm782fy6601yn01s2ciihcivh', // Style URL\n    scrollZoom: false,\n  });\n\n  // Creates a box to hold map coordinates\n  const bounds = new mapbox.LngLatBounds();\n\n  locations.forEach((loc) => {\n    // Create marker\n    const marker = document.createElement('div') as HTMLDivElement;\n    marker.className = 'marker';\n\n    // Adds a marker and adjusts the map to include the location\n    new mapbox.Marker({\n      element: marker,\n      anchor: 'bottom',\n    })\n      .setLngLat(loc.coordinates) // Location\n      .addTo(map); // Displays the marker on the map\n    // Expands the map view to include the location\n    bounds.extend(loc.coordinates);\n\n    // Shows a popup with location details\n    new mapbox.Popup({\n      offset: 30, // location details\n    })\n      .setLngLat(loc.coordinates) // Position\n      .setHTML(`<p>Day ${loc.day}: ${loc.description}</p>`)\n      .addTo(map); // Displays the popup on the map\n  });\n\n  //Adjusts map view to fit all locations\n  map.fitBounds(bounds, {\n    padding: {\n      top: 200,\n      bottom: 150,\n      left: 100,\n      right: 100,\n    },\n  });\n  window.scrollTo(0, 0);\n};\n\nexport default displayMap;\n","import axios from 'axios';\nimport { showAlert } from '../utils/alerts';\nimport getErrorMessage from '../utils/errorHandler';\n\n/**\n * Sends a logout request to the API.\n */\nconst logout = async (): Promise<void> => {\n  try {\n    const response = await axios.get<{ status: string }>(\n      '/api/v1/users/logout',\n    );\n\n    if (response.data.status === 'success') {\n      showAlert({ type: 'success', message: 'Logged out successfully.' });\n      // Redirects to the login page and replaces history\n      // to prevent \"Back\" navigation to protected page\n      window.location.replace('/login');\n    } else {\n      throw new Error('Invalid response from logout API.');\n    }\n  } catch (error: unknown) {\n    const message = getErrorMessage(error, 'Logout failed.');\n    showAlert({ type: 'error', message });\n  }\n};\n\nexport default logout;\n","import { AlertMessage } from './types';\n\n/**\n * Removes the alert message from the page if it exists.\n */\nexport const hideAlert = (): void => {\n  const alert = document.querySelector('.alert') as HTMLDivElement | null;\n  alert?.remove();\n};\n\n/**\n * Displays an alert message of the given type with custom text and timeout.\n *\n * @param type - One of: 'success' | 'error' | 'info' | 'warning'\n * @param message - The alert message to display\n * @param timeout - How long (in seconds) the alert should stay visible\n */\nexport const showAlert = ({\n  type,\n  message,\n  timeout = 7,\n}: AlertMessage): void => {\n  hideAlert();\n\n  const markup = `<div class=\"alert alert--${type}\">${message}</div>`;\n  document.body.insertAdjacentHTML('afterbegin', markup);\n\n  window.setTimeout(hideAlert, timeout * 1000);\n};\n","import axios from 'axios';\n\n/**\n * Retrieves a user-friendly error message from various error types.\n *\n * @param error - The error to extract the message from.\n * @param customMsg - Optional custom message.\n * @returns - Error message.\n */\nconst getErrorMessage = (error: unknown, customMsg?: string): string => {\n  // Default fallback message.\n  const fallbackMessage = 'Something went wrong!';\n\n  if (process.env.NODE_ENV === 'development') {\n    console.error(`Error details: ${customMsg || fallbackMessage}`, error);\n  }\n\n  if (customMsg) {\n    return customMsg;\n  }\n\n  if (axios.isAxiosError(error)) {\n    const msg =\n      error.response?.data?.message ||\n      error.response?.data?.error ||\n      error.message;\n    return typeof msg === 'string' ? msg : fallbackMessage;\n  }\n\n  if (error instanceof Error) {\n    return error.message || fallbackMessage;\n  }\n\n  return fallbackMessage;\n};\n\nexport default getErrorMessage;\n","import axios from 'axios';\nimport { LoginResponse } from '@js/types';\nimport { showAlert } from '../utils/alerts';\nimport getErrorMessage from '../utils/errorHandler';\n\n/**\n * Sends a login request to the API with provided credentials\n *\n * @param email - The user's email address\n * @param password - The user's password\n */\nconst login = async (email: string, password: string): Promise<void> => {\n  try {\n    const response = await axios.post<LoginResponse>('/api/v1/users/login', {\n      email,\n      password,\n    });\n\n    if (response.data.status === 'success') {\n      showAlert({ type: 'success', message: 'Logged in successfully!' });\n      setTimeout(() => {\n        window.location.assign('/'); // Redirects to homepage after login\n      }, 1000);\n    } else {\n      throw new Error('Invalid response from login API.');\n    }\n  } catch (error) {\n    const message = getErrorMessage(error, 'Login failed.');\n\n    showAlert({ type: 'error', message });\n  }\n};\n\nexport default login;\n","import axios from 'axios';\nimport { showAlert } from '../utils/alerts';\nimport getErrorMessage from '../utils/errorHandler';\nimport { CheckoutSessionResponse } from '@js/types';\n\n// Public key for stripe\nconst stripe = Stripe(\n  'pk_test_51QuM1LP1ItbjeRQKqk8GOG7jhbz5fhLHQFimTlVb34s0fRa0wIBPcfqNgnk9MDqpi8e6SADvLHWgAtBTndaoMBbs00HoJpKfwx',\n);\n\n/**\n * Initiates Stripe Checkout for a given adventure\n * @param adventureId - The ID of the adventure to be booked\n */\nconst bookAdventure = async (adventureId: string): Promise<void> => {\n  try {\n    // Request a Stripe checkout session from the backend\n    const res = await axios.get<CheckoutSessionResponse>(\n      `/api/v1/bookings/checkout-session/${adventureId}`,\n    );\n\n    // Validate session response before proceeding\n    if (res.data.status !== 'success' || !res.data.session.id) {\n      throw new Error('Invalid response from booking API.');\n    }\n\n    // Redirect the user to Stripe's hosted checkout page\n    const result = await stripe.redirectToCheckout({\n      sessionId: res.data.session.id,\n    });\n\n    // Handle client-side Stripe errors (e.g. popup blocked, network error)\n    if (result.error) {\n      const message = getErrorMessage(\n        result.error,\n        'Checkout failed. Please try again.',\n      );\n      showAlert({ type: 'error', message });\n    }\n  } catch (err: unknown) {\n    const message = getErrorMessage(err, 'Booking failed.');\n    showAlert({ type: 'error', message });\n  }\n};\n\nexport default bookAdventure;\n","import handleAdventureForm from './handleAdventureForm';\nimport populateAdventureForm from './populateAdventureForm';\n\nimport { createStartDateInput, createLocationGroup } from './formFields';\n\nimport { handleUserForm, handlePasswordForm } from './handleSettingsForm';\n\n// Initializes user account \"settings\" section form handlers\nexport const initSettingsForms = () => {\n  const userDataForm = document.querySelector(\n    '.form-user-data',\n  ) as HTMLFormElement | null;\n  const userPasswordForm = document.querySelector(\n    '.form-user-password',\n  ) as HTMLFormElement | null;\n\n  // Handle user data update form submission\n  userDataForm?.addEventListener('submit', (e) => {\n    e.preventDefault();\n    handleUserForm();\n  });\n\n  // Handles password update form submission\n  userPasswordForm?.addEventListener('submit', (e) => {\n    e.preventDefault();\n    handlePasswordForm();\n  });\n};\n\nexport const initManageAdventuresForms = () => {\n  const select = document.querySelector(\n    '.form-select',\n  ) as HTMLSelectElement | null;\n\n  if (!select) return;\n  select.addEventListener('change', populateAdventureForm);\n\n  // Add a new start date input when \"Add Date\" button is clicked\n  const addDateBtn = document.getElementById('addDateBtn') as HTMLButtonElement;\n  if (addDateBtn) {\n    addDateBtn.addEventListener('click', () => {\n      createStartDateInput();\n    });\n  }\n\n  // Add a new location group when \"Add Location\" button is clicked\n  const addLocationBtn = document.getElementById(\n    'addLocationBtn',\n  ) as HTMLButtonElement;\n  if (addLocationBtn) {\n    addLocationBtn.addEventListener('click', () => {\n      createLocationGroup();\n    });\n  }\n\n  const form = document.querySelector(\n    '.form-adventure-data',\n  ) as HTMLFormElement;\n\n  if (!form) return;\n\n  // Handle form submission\n  form.addEventListener('submit', handleAdventureForm);\n};\n","import { createAdventure, saveAdventure } from '../api/saveAdventure';\n\n/**\n * Handles the adventure create/update form.\n *\n * Responsibilities:\n * - Collects all form field values, including:\n *   - Basic adventure info (name, distance, duration, etc.)\n *   - Images (cover image and additional images)\n *   - Selected images to delete\n *   - Adventure start dates\n *   - Start location and multiple additional locations\n *   - Selected guides\n *\n * - Compiles all data into a FormData object for server submission.\n * - Sends either a create or update request based on whether an adventure is selected or 'Create New Adventure' option.\n *\n */\nconst handleAdventureForm = (e: SubmitEvent) => {\n  e.preventDefault();\n\n  const formData = new FormData(); // Create a new FormData object\n\n  // Collect basic adventure info from the form\n  formData.append(\n    'name',\n    (document.getElementById('name') as HTMLInputElement).value,\n  );\n  formData.append(\n    'distance',\n    (document.getElementById('distance') as HTMLInputElement).value,\n  );\n  formData.append(\n    'duration',\n    (document.getElementById('duration') as HTMLInputElement).value,\n  );\n  formData.append(\n    'maxGroupSize',\n    (document.getElementById('maxGroupSize') as HTMLInputElement).value,\n  );\n  formData.append(\n    'difficulty',\n    (document.getElementById('difficulty') as HTMLSelectElement).value,\n  );\n  formData.append(\n    'price',\n    (document.getElementById('price') as HTMLInputElement).value,\n  );\n  formData.append(\n    'priceDiscount',\n    (document.getElementById('priceDiscount') as HTMLInputElement).value,\n  );\n  formData.append(\n    'summary',\n    (document.getElementById('summary') as HTMLTextAreaElement).value,\n  );\n  formData.append(\n    'description',\n    (document.getElementById('description') as HTMLInputElement).value,\n  );\n\n  // Handle image uploads\n  const imageCover = document.getElementById('imageCover') as HTMLInputElement;\n  const images = document.getElementById('images') as HTMLInputElement;\n\n  // Append main cover image if it exists\n  if (imageCover?.files && imageCover.files.length > 0) {\n    formData.append('imageCover', imageCover.files[0]);\n  }\n\n  // Append additional images\n  const files = images?.files;\n  if (files?.length) {\n    Array.from(files).forEach((file) => {\n      formData.append('images', file);\n    });\n  }\n\n  // Append IDs of images marked for deletion\n  const deleteImagesCheckboxes = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"deleteImages\"]:checked',\n  );\n\n  if (deleteImagesCheckboxes) {\n    deleteImagesCheckboxes.forEach((checkbox) => {\n      formData.append('deleteImages', checkbox.value);\n    });\n  }\n\n  // Append all start date values\n  const startDate = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"startDates[]\"]',\n  );\n\n  startDate.forEach((input) => {\n    if (input.value) formData.append('startDates[]', input.value);\n  });\n\n  // Prepare and append the start location data\n  const lngInput = document.getElementById(\n    'startLocationLng',\n  ) as HTMLInputElement;\n  const latInput = document.getElementById(\n    'startLocationLat',\n  ) as HTMLInputElement;\n  const addressInput = document.getElementById(\n    'startLocationAddress',\n  ) as HTMLInputElement;\n  const descriptionInput = document.getElementById(\n    'startLocationDescription',\n  ) as HTMLInputElement;\n\n  const lng = parseFloat(lngInput.value);\n  const lat = parseFloat(latInput.value);\n  const address = addressInput.value;\n  const description = descriptionInput.value;\n\n  if (!isNaN(lng) && !isNaN(lat)) {\n    formData.append(\n      'startLocation',\n      JSON.stringify({\n        type: 'Point',\n        coordinates: [lng, lat],\n        address: address || '',\n        description: description || '',\n      }),\n    );\n  }\n\n  // Append all additional location data\n  const lngInputs = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"locationLng[]\"]',\n  );\n  const latInputs = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"locationLat[]\"]',\n  );\n  const addressInputs = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"locationAddress[]\"]',\n  );\n  const descriptionInputs = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"locationDescription[]\"]',\n  );\n  const dayInputs = document.querySelectorAll<HTMLInputElement>(\n    'input[name=\"locationDay[]\"]',\n  );\n\n  lngInputs.forEach((lngInput, i) => {\n    const latInput = latInputs[i];\n    const addressInput = addressInputs[i];\n    const descriptionInput = descriptionInputs[i];\n    const dayInput = dayInputs[i];\n\n    if (lngInput?.value && latInput?.value) {\n      formData.append(\n        'locations[]',\n        JSON.stringify({\n          type: 'Point',\n          coordinates: [parseFloat(lngInput.value), parseFloat(latInput.value)],\n          address: addressInput?.value || '',\n          description: descriptionInput?.value || '',\n          day: dayInput?.value ? parseInt(dayInput.value, 10) : i + 1,\n        }),\n      );\n    }\n  });\n\n  // Append selected guides\n  const guides = document.getElementById('guides') as HTMLSelectElement;\n  Array.from(guides.selectedOptions).forEach((option) => {\n    formData.append('guides[]', option.value);\n  });\n\n  // Get adventure ID (if updating an existing adventure)\n  const select = document.querySelector(\n    '.form-select',\n  ) as HTMLSelectElement | null;\n  const selectedAdventureId = select?.value;\n\n  // Log all form data to the console (for debugging)\n  // for (let pair of formData.entries()) {\n  //   console.log(`Front: ${pair[0]}:`, pair[1]);\n  // }\n\n  // Decide whether to create a new adventure or update an existing one\n  if (!selectedAdventureId) {\n    saveAdventure(formData, 'create');\n  } else {\n    saveAdventure(formData, 'update', selectedAdventureId);\n  }\n};\n\nexport default handleAdventureForm;\n","import axios from 'axios';\nimport { showAlert } from '../utils/alerts';\nimport getErrorMessage from '../utils/errorHandler';\nimport { AdventureResponse } from '@js/types';\n\n/**\n * Creates or updates an adventure by sending a POST or PATCH request.\n *\n * @param data - FormData containing adventure details.\n * @param action - Action type: 'create' for new adventure, 'update' for existing adventure.\n * @param id - Adventure ID (required only for updating).\n *\n */\nexport const saveAdventure = async (\n  data: FormData,\n  action: 'create' | 'update',\n  id?: string,\n) => {\n  try {\n    let url = '/api/v1/adventures';\n    let res;\n\n    switch (action) {\n      case 'create':\n        res = await axios.post<AdventureResponse>(url, data);\n        break;\n      case 'update':\n        res = await axios.patch<AdventureResponse>(`${url}/${id}`, data);\n        break;\n      default:\n        throw new Error(`Invalid action: ${action}`);\n    }\n\n    if (res.data.status === 'success') {\n      showAlert({\n        type: 'success',\n        message: `Adventure ${action}d successfully`,\n      });\n    }\n  } catch (err) {\n    const message = getErrorMessage(\n      err,\n      action === 'create'\n        ? 'Adventure creation failed'\n        : 'Adventure updating failed',\n    );\n    showAlert({ type: 'error', message });\n  }\n};\n","import {\n  createStartDateInput,\n  createLocationGroup,\n  coverPreviewContainer,\n  imagesPreviewContainer,\n} from './formFields';\n\nimport { fillAdventureForm } from './fillAdventureForm';\nimport { GeoLocation } from '@js/types';\nimport { Guide } from '@js/types';\nimport getErrorMessage from '../utils/errorHandler';\nimport { showAlert } from '../utils/alerts';\n\n/**\n * Handles populating the adventure form when an adventure is selected from a dropdown in Manage adventures section\n *\n * - Listens to changes on the adventure select element.\n * - If no adventure is selected (\"none\" option), resets the form to its default empty state.\n * - If an adventure is selected, fetches the corresponding adventure data from the API.\n * - Fills the form fields, including start dates, locations, guides, and image previews, with the fetched data.\n * - Utilizes utility functions for creating and populating form fields and handling errors.\n *\n */\nconst populateAdventureForm = async (e: Event) => {\n  try {\n    const btnSubmitAdventure = document.getElementById(\n      'submit-adventure',\n    ) as HTMLButtonElement;\n\n    // If adventure is selected then change button label to Update adventure\n    btnSubmitAdventure.textContent = 'Update Adventure';\n\n    const target = e.target as HTMLSelectElement;\n    const id = target.value;\n\n    const form = document.querySelector(\n      '.form-adventure-data',\n    ) as HTMLFormElement;\n\n    const locationsWrapper = document.getElementById(\n      'locationsWrapper',\n    ) as HTMLDivElement;\n\n    const startDatesWrapper = document.getElementById(\n      'startDatesWrapper',\n    ) as HTMLDivElement;\n\n    // If selected \"none\" option or adventure not exist reset form to initial state\n    if (!id) {\n      form.reset();\n\n      // Clear existing start date fields and insert a new empty one\n      startDatesWrapper.innerHTML = '';\n      createStartDateInput();\n      // Clear existing location fields and insert a new empty group\n      locationsWrapper.innerHTML = '';\n      createLocationGroup();\n\n      // Clear existing cover and image preview fields\n      coverPreviewContainer();\n      imagesPreviewContainer();\n\n      // If 'none' is selected then change button label to create adventure\n      btnSubmitAdventure.textContent = 'Create Adventure';\n\n      return;\n    }\n\n    // Fetch adventure from API\n    const res = await fetch(`/api/v1/adventures/${id}`);\n\n    // Catch network issues (e.g. 404, 500)\n    if (!res.ok) {\n      throw new Error('Failed to fetch adventure.');\n    }\n\n    // Parse response and destructure to extract adventure directly\n    const {\n      status,\n      data: { data: adventure },\n    } = await res.json();\n\n    // Handle application-level errors\n    if (status !== 'success') {\n      throw new Error('API error: status not success.');\n    }\n\n    // Fill the form with existing adventure data\n    fillAdventureForm(adventure);\n\n    // Fill image cover container\n    imagesPreviewContainer(adventure);\n\n    // Fill images container\n    coverPreviewContainer(adventure);\n\n    // Fill start dates\n    if (Array.isArray(adventure.startDates)) {\n      startDatesWrapper.innerHTML = '';\n      adventure.startDates.forEach((dateStr: string) => {\n        const value = new Date(dateStr).toISOString().split('T')[0];\n        createStartDateInput(value);\n      });\n    }\n\n    // Fill locations\n    if (Array.isArray(adventure.locations)) {\n      locationsWrapper.innerHTML = '';\n\n      adventure.locations.forEach((loc: GeoLocation) => {\n        createLocationGroup(loc);\n      });\n    }\n\n    // Set multiple adventure guides\n    const guidesSelect = document.getElementById('guides') as HTMLSelectElement;\n\n    if (Array.isArray(adventure.guides)) {\n      // Convert to normal array and clear previous selection\n      Array.from(guidesSelect.options).forEach((option) => {\n        option.selected = false;\n      });\n\n      // Extract guide IDs\n      const guideIds = adventure.guides.map((guide: Guide) => guide._id);\n\n      // Select matching options\n      Array.from(guidesSelect.options).forEach((option) => {\n        if (guideIds.includes(option.value)) {\n          option.selected = true;\n        }\n      });\n    }\n  } catch (err) {\n    const message = getErrorMessage(err, 'Error fetching adventure data');\n    showAlert({ type: 'error', message });\n  }\n};\n\nexport default populateAdventureForm;\n","import { GeoLocation, Adventure } from '@js/types';\n\n/**\n * Creates <input> start date field and prefill it with time data.\n *\n * @param value - The date value to prefill in the new input field (ISO format expected).\n */\nexport const createStartDateInput = (value: string = '') => {\n  const startDatesWrapper = document.getElementById(\n    'startDatesWrapper',\n  ) as HTMLDivElement;\n  if (!startDatesWrapper) return;\n\n  const newInput = document.createElement('input');\n  newInput.type = 'date';\n  newInput.name = 'startDates[]';\n  newInput.className = 'form-control mt-2';\n  newInput.value = value;\n\n  startDatesWrapper.appendChild(newInput);\n};\n\n/**\n * Creates <input> geo location fields and prefill with location data.\n *\n * @param loc - GeoLocation object containing coordinates, address, description, and day.\n */\nexport const createLocationGroup = (loc: Partial<GeoLocation> = {}) => {\n  const locationsWrapper = document.getElementById(\n    'locationsWrapper',\n  ) as HTMLDivElement;\n  if (!locationsWrapper) return;\n\n  let locationCount: number = locationsWrapper.children.length + 1;\n\n  const group = document.createElement('div');\n  group.className = 'location-group mb-3 p-3 border rounded';\n\n  group.innerHTML = `\n    <label class=\"form-label\">Location ${locationCount}</label>\n    <div class=\"row g-2\">\n      <div class=\"col-md-4\">\n        <input class=\"form-control\" type=\"number\" name=\"locationLng[]\" step=\"any\" value=\"${loc?.coordinates?.[0] ?? ''}\" placeholder=\"Longitude\" />\n      </div>\n      <div class=\"col-md-4\">\n        <input class=\"form-control\" type=\"number\" name=\"locationLat[]\" step=\"any\" value=\"${loc?.coordinates?.[1] ?? ''}\" placeholder=\"Latitude\" />\n      </div>\n      <div class=\"col-md-4\">\n        <input class=\"form-control\" type=\"text\" name=\"locationAddress[]\" value=\"${loc?.address ?? ''}\" placeholder=\"Address\" />\n      </div>\n      <div class=\"col-md-6 mt-2\">\n        <input class=\"form-control\" type=\"text\" name=\"locationDescription[]\" value=\"${loc?.description ?? ''}\" placeholder=\"Description\" />\n      </div>\n      <div class=\"col-md-6 mt-2\">\n        <input class=\"form-control\" type=\"number\" name=\"locationDay[]\" value=\"${loc?.day ?? ''}\" placeholder=\"Day\" />\n      </div>\n    </div>\n  `;\n\n  locationsWrapper.appendChild(group);\n};\n\n/**\n * Displays the current image cover preview for the given adventure.\n *\n * @param adventure - Adventure object containing the imageCover filename.\n */\nexport const coverPreviewContainer = (adventure: Partial<Adventure> = {}) => {\n  const coverPreviewContainer = document.getElementById(\n    'imageCoverPreviewContainer',\n  ) as HTMLDivElement;\n  if (!coverPreviewContainer) return;\n\n  coverPreviewContainer.innerHTML = ''; // Clear previous\n\n  if (adventure.imageCover) {\n    const currentImageCover = `\n    <div class=\"mb-2\">\n      <h3>Image Cover</h3>\n      <img src=\"/assets/adventures/${adventure.imageCover}\" alt=\"Cover Image\" width=\"150\" class=\"img-thumbnail mt-2\">\n    </div>\n  `;\n    coverPreviewContainer.insertAdjacentHTML('beforeend', currentImageCover);\n  }\n};\n\n/**\n * Displays all current gallery images with an option to mark them for deletion.\n *\n * @param adventure - Adventure object containing images array with filenames.\n */\nexport const imagesPreviewContainer = (adventure: Partial<Adventure> = {}) => {\n  const imagesPreviewContainer = document.getElementById(\n    'imagesPreviewContainer',\n  ) as HTMLDivElement;\n\n  if (!imagesPreviewContainer) return;\n\n  imagesPreviewContainer.innerHTML = ''; // Clear previous\n\n  if (!(Array.isArray(adventure.images) && adventure.images.length > 0)) return;\n\n  adventure.images.forEach((img, i) => {\n    const checkbox = `\n      <div class=\"mb-2\">\n        <input class=\"form-check-input\" type=\"checkbox\" name=\"deleteImages\" id=\"deleteImage-${i}\" value=\"${img}\">\n        <label class=\"form-check-label ms-2\" for=\"deleteImage-${i}\">Delete image ${i + 1}</label>\n        <br>\n        <img src=\"/assets/adventures/${img}\" alt=\"Image ${i + 1}\" width=\"150\" class=\"img-thumbnail mt-2\">\n      </div>\n    `;\n    imagesPreviewContainer.insertAdjacentHTML('beforeend', checkbox);\n  });\n};\n","import { Adventure } from '@js/types';\n\n/**\n * Fills adventure form inputs with provided adventure data.\n * Safely handles missing fields.\n */\nexport const fillAdventureForm = (adventure: Partial<Adventure>) => {\n  (document.getElementById('name') as HTMLInputElement).value =\n    adventure.name ?? '';\n  (document.getElementById('description') as HTMLInputElement).value =\n    adventure.description ?? '';\n  (document.getElementById('summary') as HTMLTextAreaElement).value =\n    adventure.summary ?? '';\n\n  (document.getElementById('distance') as HTMLInputElement).value = String(\n    adventure.distance ?? '',\n  );\n  (document.getElementById('duration') as HTMLInputElement).value = String(\n    adventure.duration ?? '',\n  );\n  (document.getElementById('maxGroupSize') as HTMLInputElement).value = String(\n    adventure.maxGroupSize ?? '',\n  );\n  (document.getElementById('price') as HTMLInputElement).value = String(\n    adventure.price ?? '',\n  );\n  (document.getElementById('priceDiscount') as HTMLInputElement).value = String(\n    adventure.priceDiscount ?? '',\n  );\n\n  (document.getElementById('difficulty') as HTMLSelectElement).value =\n    adventure.difficulty ?? '';\n\n  // Start Location\n  (\n    document.getElementById('startLocationDescription') as HTMLInputElement\n  ).value = adventure.startLocation?.description ?? '';\n  (document.getElementById('startLocationAddress') as HTMLInputElement).value =\n    adventure.startLocation?.address ?? '';\n  (document.getElementById('startLocationLng') as HTMLInputElement).value =\n    adventure.startLocation?.coordinates?.[0] !== undefined\n      ? String(adventure.startLocation.coordinates[0])\n      : '';\n  (document.getElementById('startLocationLat') as HTMLInputElement).value =\n    adventure.startLocation?.coordinates?.[1] !== undefined\n      ? String(adventure.startLocation.coordinates[1])\n      : '';\n};\n","import { updateUserSettings } from '../api/updateUserSettings';\n\n/**\n *  Handles updating user profile information.\n */\nexport const handleUserForm = () => {\n  const nameInput = document.getElementById('name') as HTMLInputElement;\n  const emailInput = document.getElementById('email') as HTMLInputElement;\n  const photoInput = document.getElementById('photo') as HTMLInputElement;\n\n  // Appends input values into a FormData object\n  const form = new FormData();\n  form.append('name', nameInput.value.trim());\n  form.append('email', emailInput.value.trim());\n\n  const photo = photoInput.files?.[0];\n  if (photo) form.append('photo', photo);\n\n  // Submit the data as a FormData object\n  updateUserSettings(form, 'data');\n};\n\n/**\n *  Handles updating the user's password.\n */\nexport const handlePasswordForm = async () => {\n  const passwordCurrentInput = document.getElementById(\n    'password-current',\n  ) as HTMLInputElement;\n  const passwordInput = document.getElementById('password') as HTMLInputElement;\n  const passwordConfirmInput = document.getElementById(\n    'password-confirm',\n  ) as HTMLInputElement;\n\n  // Submit data to the server\n  await updateUserSettings(\n    {\n      passwordCurrent: passwordCurrentInput.value,\n      password: passwordInput.value,\n      passwordConfirm: passwordConfirmInput.value,\n    },\n    'password',\n  );\n\n  passwordCurrentInput.value = '';\n  passwordInput.value = '';\n  passwordConfirmInput.value = '';\n};\n","import axios from 'axios';\nimport { showAlert } from '../utils/alerts';\nimport getErrorMessage from '../utils/errorHandler';\nimport { UpdatedUser } from '@js/types';\n\ntype PasswordData = {\n  passwordCurrent: string;\n  password: string;\n  passwordConfirm: string;\n};\n\n/**\n * Updates user profile data or password via a PATCH request.\n *\n * @param data - FormData for profile updates or PasswordData for password updates.\n * @param type - Action type: either 'data' for profile info or 'password' for password change.\n *\n */\nexport const updateUserSettings = async (\n  data: FormData | PasswordData,\n  type: 'password' | 'data',\n) => {\n  try {\n    const url =\n      type === 'password'\n        ? '/api/v1/users/updateMyPassword'\n        : '/api/v1/users/updateMe';\n\n    const res = await axios.patch<UpdatedUser>(url, data);\n\n    if (res.data.status === 'success') {\n      showAlert({\n        type: 'success',\n        message: `${type === 'password' ? 'Password' : 'User'} updated successfully!`,\n      });\n    } else {\n      throw new Error('Invalid response from update user settings API.');\n    }\n  } catch (err) {\n    const message = getErrorMessage(\n      err,\n      `${type === 'password' ? 'Password' : 'User'} update failed!`,\n    );\n    showAlert({ type: 'error', message });\n  }\n};\n","import { loadSection } from '../api/loadSection';\nimport {\n  initManageAdventuresForms,\n  initSettingsForms,\n} from './initAccountSections';\n\n/**\n * Initializes dashboard navigation.\n *\n * - Delegates click events from dashboard menu lists to load content dynamically without page refresh.\n * - Listens to browser history \"popstate\" events to handle back/forward navigation.\n */\nexport const dashboardNav = () => {\n  const dashLists = document.querySelectorAll<HTMLUListElement>('.dashLists');\n\n  let activeDashSection = document.querySelector<HTMLLIElement>(\n    '.dashLists .list-group-item.active',\n  );\n\n  dashLists.forEach((list) => {\n    list.addEventListener('click', async function (e) {\n      e.preventDefault();\n      // Use closest() to ensure we always get the nearest <li> ancestor with a data-section attribute\n      const target = (e.target as HTMLElement).closest('li[data-section]');\n\n      if (!target || !(target instanceof HTMLLIElement)) return;\n\n      const section = (target as HTMLLIElement).dataset.section;\n\n      if (!section) return;\n      await loadSection(section);\n\n      if (activeDashSection) {\n        activeDashSection.classList.remove('active');\n      }\n\n      target.classList.add('active');\n      //  Remember active item\n      activeDashSection = target;\n\n      initDashboardSections(section);\n    });\n  });\n\n  // Handle browser back/forward buttons to load the correct section dynamically\n  window.addEventListener('popstate', async () => {\n    const section = window.location.pathname.split('/')[2] || 'settings';\n    await loadSection(section);\n\n    initDashboardSections(section);\n  });\n};\n\n/**\n * Initializes dashboard logic based on the active section.\n * Called after HTML content has been dynamically injected.\n *\n * @param section - The current section identifier\n */\nconst initDashboardSections = (section: string) => {\n  switch (section) {\n    case 'manage-adventures':\n      initManageAdventuresForms();\n      break;\n    case 'settings':\n      initSettingsForms();\n      break;\n    default:\n      initSettingsForms();\n  }\n};\n","import axios from 'axios';\nimport getErrorMessage from '../utils/errorHandler';\nimport { showAlert } from '../utils/alerts';\n\nconst contentDiv = document.getElementById('dynamic-content') as HTMLDivElement;\n\n/**\n * Dynamically loads a section into the account page without a full page reload.\n *\n * @param section - The section to load (e.g., 'settings', 'bookings').\n */\nexport const loadSection = async (section: string) => {\n  try {\n    const url = `/me/${section}`;\n\n    // Fetch the raw HTML string of the requested section\n    const res = await axios.get<string>(url);\n\n    // Parse the fetched HTML string into a document object\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(res.data, 'text/html');\n    const newContent = doc.querySelector('#dynamic-content') as HTMLDivElement;\n\n    // Update only the dynamic content area, preserving the rest of the page\n    contentDiv.innerHTML = newContent.innerHTML;\n\n    // Update the browser URL without triggering a page reload\n    history.pushState({}, '', url);\n  } catch (err) {\n    const message = getErrorMessage(err, 'Failed to load section:');\n    showAlert({ type: 'error', message });\n\n    // Display fallback content if the section fails to load\n    contentDiv.innerHTML = '<h2>Error loading content. Try again.</h2>';\n  }\n};\n"],"names":[],"version":3,"file":"app.js.map","sourceRoot":"/"}